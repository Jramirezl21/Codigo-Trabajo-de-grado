Datos <- read.csv(datos.csv)
Datos <- read.csv("datos.csv")
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
DatosCap <- Datos[,c(5:26)]
View(DatosCap)
# Crear una función para calcular la cantidad de varianza explicada por el PCA
calcular_varianza_pca <- function(data) {
# Realizar el PCA
pca_result <- PCA(data, scale.unit = TRUE)
# Extraer la cantidad de varianza explicada por cada componente principal
var_exp <- pca_result$eig[,"percentage of variance"]
return(var_exp)
}
# Número de submuestras
num_submuestras <- 1000
# Tamaño de cada submuestra
tam_submuestra <- 3000
# Lista para almacenar la cantidad de varianza explicada de cada submuestra
varianza_explicada <- vector("list", num_submuestras)
# Ciclo para generar y analizar cada submuestra
for (i in 1:num_submuestras) {
# Generar una submuestra aleatoria
submuestra <- DatosCap[sample(nrow(DatosCap), tam_submuestra, replace = FALSE), ]
# Calcular la cantidad de varianza explicada por el PCA de la submuestra actual
varianza_explicada[[i]] <- calcular_varianza_pca(submuestra)
}
View(varianza_explicada)
View(varianza_explicada)
rm(varianza_explicada)
View(calcular_varianza_pca)
View(calcular_varianza_pca)
# Lista para almacenar la cantidad de varianza explicada de cada submuestra
varianza_explicada <- vector("list", num_submuestras)
AcpCap <- PCA(DatosCap)
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr
library(whomds)
library(dplyr)
AcpCap <- PCA(DatosCap)
AcpCap$var$coord
calcular_cargas_pca <- function(data) {
# Realizar el PCA
pca_resultado <- PCA(data, scale.unit = TRUE)
# Extraer la cantidad de varianza explicada por cada componente principal
cargas <- pca_resultado$var$coord
return(cargas)
}
# Lista para almacenar la cantidad de varianza explicada de cada submuestra
varianza_explicada <- vector("list", num_submuestras)
# Lista para almacenar la cantidad de varianza explicada de cada submuestra
varianza_explicada <- vector("list", num_submuestras)
cargas <-  vector("list", num_submuestras)
rm(cargas)
cargas_fact <-  vector("list", num_submuestras)
calcular_cargas_pca <- function(data) {
# Realizar el PCA
pca_resultado <- PCA(data, scale.unit = TRUE)
# Extraer la cantidad de varianza explicada por cada componente principal
cargas <- pca_resultado$var$coord
return(cargas)
}
# Ciclo para generar y analizar cada submuestra
for (i in 1:num_submuestras) {
# Generar una submuestra aleatoria
submuestra <- DatosCap[sample(nrow(DatosCap), tam_submuestra, replace = FALSE), ]
# Calcular la cantidad de varianza explicada por el PCA de la submuestra actual
varianza_explicada[[i]] <- calcular_varianza_pca(submuestra)
cargas_fact [[i]] <- calcular_cargas_pca(submuestra)
}
View(varianza_explicada)
#Segunda submuestra
# Tamaño de cada submuestra
tam_submuestra2 <- 1750
varianza_explicada2 <- vector("list", num_submuestras)
cargas_fact2 <-  vector("list", num_submuestras)
for (i in 1:num_submuestras) {
# Generar una submuestra aleatoria
submuestra2 <- DatosCap[sample(nrow(DatosCap), tam_submuestra2, replace = FALSE), ]
# Calcular la cantidad de varianza explicada por el PCA de la submuestra actual
varianza_explicada2[[i]] <- calcular_varianza_pca(submuestra2)
cargas_fact2[[i]] <- calcular_cargas_pca(submuestra2)
}
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
for (i in 1:num_submuestras) {
# Generar una submuestra aleatoria
submuestra2 <- DatosCap[sample(nrow(DatosCap), tam_submuestra2, replace = FALSE), ]
# Calcular la cantidad de varianza explicada por el PCA de la submuestra actual
varianza_explicada2[[i]] <- calcular_varianza_pca(submuestra2)
cargas_fact2[[i]] <- calcular_cargas_pca(submuestra2)
}
varianza_explicada[[3]]
class(varianza_explicada[[3]])
is.vector(varianza_explicada[[3]])
indice_maximo <- which.max(sapply(varianza_explicada, `[`, 1))
indice_maximo
varianza_explicada[[730]]
indice_maximo2 <- which.max(sapply(varianza_explicada2, `[`, 1))
indice_maximo2
varianza_explicada2[[697]]
4754/2
# Tamaño de la muestra y número de submuestras
tamano_muestra3 <- 2377
# Crear una matriz para almacenar los resultados
resultados3 <- matrix(NA, nrow = num_submuestras, ncol = 2)
# Realizar el muestreo y análisis de componentes principales
for (i in 1:num_submuestras) {
# Muestreo aleatorio de la base de datos original
muestra <- sample(DatosCap, tamano_muestra)
# Realizar el análisis de componentes principales
acp <- PCA(tus_datos[muestra, ])  # Reemplaza "tus_datos" con tu base de datos
# Guardar la varianza explicada del primer componente y su carga factorial
resultados3[i, 1] <- acp$eig[1, 2]  # Varianza explicada del primer componente
resultados3[i, 2] <- acp$var$coord[,1]  # Carga factorial del primer componente
}
# Realizar el muestreo y análisis de componentes principales
for (i in 1:num_submuestras) {
# Muestreo aleatorio de la base de datos original
muestra <- sample(DatosCap, tamano_muestra3)
# Realizar el análisis de componentes principales
acp <- PCA(tus_datos[muestra, ])  # Reemplaza "tus_datos" con tu base de datos
# Guardar la varianza explicada del primer componente y su carga factorial
resultados3[i, 1] <- acp$eig[1, 2]  # Varianza explicada del primer componente
resultados3[i, 2] <- acp$var$coord[,1]  # Carga factorial del primer componente
}
sample(DatosCap, tamano_muestra3)
# Muestreo aleatorio de la base de datos original
muestra <- sample(x=DatosCap, size=tamano_muestra3)
tamano_muestra3 > length(DatosCap)
sample(x=DatosCap, size=tamano_muestra3)
num_submuestras
tamano_muestra3
# Realizar el muestreo y análisis de componentes principales
for (i in 1:num_submuestras) {
# Muestreo aleatorio de la base de datos original
muestra <- sample(1:4754, tamano_muestra3)
# Realizar el análisis de componentes principales
acp <- PCA(DatosCap[muestra, ])  # Reemplaza "tus_datos" con tu base de datos
# Guardar la varianza explicada del primer componente y su carga factorial
resultados[i, 1] <- acp$eig[1, 2]  # Varianza explicada del primer componente
resultados[i, 2] <- acp$var$coord[,1]  # Carga factorial del primer componente
}
rm(acp)
# Realizar el muestreo y análisis de componentes principales
for (i in 1:num_submuestras) {
# Muestreo aleatorio de la base de datos original
muestra <- sample(1:4754, tamano_muestra3)
# Realizar el análisis de componentes principales
acp <- PCA(DatosCap[muestra, ])  # Reemplaza "tus_datos" con tu base de datos
# Guardar la varianza explicada del primer componente y su carga factorial
resultados3[i, 1] <- acp$eig[1, 2]  # Varianza explicada del primer componente
resultados3[i, 2] <- acp$var$coord[,1]  # Carga factorial del primer componente
}
View(cargas_fact)
View(cargas_fact)
View(cargas_fact)
View(acp)
rm(acp)
### Tercera y cuarta submuestra
rm(tamano_muestra3)
rm(resultados3)
# Tamaño de la muestra y número de submuestras
tamano_submuestra <- 2377
for (i in 1:n_submuestras) {
muestra <- sample(1:4754, tamano_submuestra, replace = FALSE)
lista_submuestras[[i]] <- mi_base_datos[muestra, ]
}
for (i in 1:num_submuestras) {
muestra <- sample(1:4754, tamano_submuestra, replace = FALSE)
lista_submuestras[[i]] <- mi_base_datos[muestra, ]
}
# Tamaño de la muestra y número de submuestras
tamano_submuestra <- 2377
lista_submuestras <- vector("list", n_submuestras)
for (i in 1:num_submuestras) {
muestra <- sample(1:4754, tamano_submuestra, replace = FALSE)
lista_submuestras[[i]] <- DatosCap[muestra, ]
}
lista_submuestras <- vector("list", n_submuestras)
lista_submuestras <- vector("list", num_submuestras)
for (i in 1:num_submuestras) {
muestra <- sample(1:4754, tamano_submuestra, replace = FALSE)
lista_submuestras[[i]] <- DatosCap[muestra, ]
}
lista_submuestras
View(lista_submuestras)
for (i in 1:num_submuestras) {
var_acp3[[i]] <- PCA(lista_submuestras[[i]], graph = FALSE)$eig
cargas_acp3[[i]] <- PCA(lista_submuestras[[i]], graph = FALSE)$var$coord
}
var_acp3 <- vector("list", n_submuestras)
var_acp3 <- vector("list",num_submuestras)
cargas_acp3 <- vector("list", num_submuestras)
for (i in 1:num_submuestras) {
var_acp3[[i]] <- PCA(lista_submuestras[[i]], graph = FALSE)$eig
cargas_acp3[[i]] <- PCA(lista_submuestras[[i]], graph = FALSE)$var$coord
}
View(var_acp3)
indice_max_varianza3 <- which.max(sapply(var_acp3, `[`, 1))
indice_max_varianza3
var_acp3[[778]]
cargas_acp3[[778]]
lista_submuestras[[778]]
individuos_seleccionados <- rownames(lista_submuestras[[778]])
individuos_faltantes <- setdiff(1:4754, individuos_seleccionados)
nueva_muestra <- DatosCap[individuos_faltantes, ]
nueva_muestra
var_acp3[[778]]
View(varianza_explicada)
View(varianza_explicada)
View(varianza_explicada2)
View(varianza_explicada2)
acp4 <- PCA(nueva_muestra)
var_acp4 <- acp4$eig
cargas_acp4 <- acp$var$coord
cargas_acp4 <- acp4$var$coord
##### Comparacion varianzas explicadas
indice_max_varianza3
##### Comparacion varianzas explicadas
varianza_explicada[[730]]
varianza_explicada2[[697]]
var_acp3[[778]]
var_acp4 <- acp4$eig
##### Comparacion varianzas explicadas
varianza_explicada[[730]]
varianza_explicada2[[697]]
var_acp3[[778]]
var_acp4 <- acp4$eig
varianza_explicada2[[697]]
cargas_fact2[[697]]
#Seleccionar el de mayor varianza explicada, la muestra 2
cargas_fact[[730]]
cargas_fact2[[697]]
cargas_acp3[[778]]
cargas_acp4
#Seleccionar el de mayor varianza explicada, la muestra 2
cargas_fact[[730]]$Dim.1
#Seleccionar el de mayor varianza explicada, la muestra 2
data.frame(cargas_fact[[730]])$Dim.1
#Seleccionar el de mayor varianza explicada, la muestra 2
cargas1 <-  data.frame(cargas_fact[[730]])$Dim.1
cargas2 <- data.frame(cargas_fact2[[697]])$Dim.1
cargas3 <- data.frame(cargas_acp3[[778]])$Dim.1
cargas4 <- data.frame(cargas_acp4)$Dim.1
rowSums(ponderaciones * DatosCap)
rowSums(cargas1* DatosCap)
View(DatosCap)
puntuaciones2 <- rowSums(cargas2* DatosCap)
puntuaciones3 <- rowSums(cargas3* DatosCap)
puntuaciones4 <- rowSums(cargas4* DatosCap)
vector1 <- c(min(puntuaciones1),max(puntuaciones1))
puntuaciones1 <- rowSums(cargas1* DatosCap)
puntuaciones2 <- rowSums(cargas2* DatosCap)
puntuaciones3 <- rowSums(cargas3* DatosCap)
puntuaciones4 <- rowSums(cargas4* DatosCap)
vector1 <- c(min(puntuaciones1),max(puntuaciones1))
vector1
vector2 <- c(min(puntuaciones2),max(puntuaciones2))
vector2
vector3 <- c(min(puntuaciones3),max(puntuaciones3))
vector3
vector4 <- c(min(puntuaciones4),max(puntuaciones4))
vector4
max(puntuaciones1)-min(puntuaciones1)
max(puntuaciones3)-min(puntuaciones3)
max(puntuaciones2)-min(puntuaciones2)
max(puntuaciones4)-min(puntuaciones4)
#Se selecciona el indicador o puntuaciones 2
DatosCap$PuntajeCap <- puntuaciones2
puntuaciones2
kmeans(DatosCap$PuntajeCap, 4, iter.max = 1000, nstart = 10)
kmeans <- kmeans(DatosCap$PuntajeCap, 4, iter.max = 1000, nstart = 1)
kmeans(DatosCap$PuntajeCap, 4, iter.max = 1000, nstart = 1)
plot(puntuaciones2 , col = kmeans$cluster, main = "Clustering con K-means", xlab = "Índice", ylab = "Valor")
points(clusters$centers, col = 1:k, pch = 8, cex = 2)
kmeans$cluster
View(DatosCap)
fviz_cluster(kmeans)
fviz_cluster(kmeans,data=DatosCap$PuntajeCap)
kmeans <- kmeans(DatosCap, 4, iter.max = 1000, nstart = 1)
plot(puntuaciones2 , col = kmeans$cluster, main = "Clustering con K-means", xlab = "Índice", ylab = "Valor")
kmeans
fviz_cluster(kmeans,data=DatosCap)
kmeans$cluster
View(DatosCap)
rm(kmeans)
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
kmeansDatosCap <- kmeans(DatosCap, 4, iter.max = 1000, nstart = 1)
kmeansPun2 <- kmeans(puntuaciones2 , 4, iter.max = 1000, nstart = 1)
kmeansDatosCap
kmeansPun2
kmeansPun2$cluster
cbind(kmeansPun2$cluster,kmeansDatosCap$cluster)
clustersPun2 <- cbind(kmeansPun2$cluster,puntuaciones2)
clustersDatosCap <- cbind(kmeansDatosCap$cluster,puntuaciones2)
clustersPun2
clustersPun2 <- data.frame(cbind(kmeansPun2$cluster,puntuaciones2))
clustersDatosCap <- data.frame(cbind(kmeansDatosCap$cluster,puntuaciones2))
# Calcular el mínimo de puntación para cada clasificación
minimos_por_clasificacion <- aggregate(clustersPun2$puntuaciones2,
by = list(clasificacion = clustersPun2$V1), FUN = min)
minimos_por_clasificacion
# Renombrar las columnas
colnames(minimos_por_clasificacion) <- c("Clasificacion", "Minimo_Puntaje")
# Calcular el mínimo de puntación para cada clasificación
minimos_por_clasificacionCap <- aggregate(clustersDatosCap$puntuaciones2,
by = list(clasificacion = clustersDatosCap$V1), FUN = min)
# Renombrar las columnas
colnames(minimos_por_clasificacionCap) <- c("Clasificacion", "Minimo_Puntaje")
minimos_por_clasificacionCap
fviz_cluster(kmeansDatosCap,data=DatosCap)
fviz_cluster(kmeansPun2 ,data=DatosCap)
kmeansPun2$centers
fviz_cluster(kmeansPun2 ,data=DatosCap)
kmeansDatosCap$centers
kmeansPun2$centers
View(DatosCap)
minimos_por_clasificacion
##Tomo los cluster por puntaciones unicamente
max_por_clasificacion <- aggregate(clustersPun2$puntuaciones2,
by = list(clasificacion = clustersPun2$V1),FUN = max)
max_por_clasificacion
fviz_cluster(kmeansPun2 ,data=DatosCap)
minimos_por_clasificacion
# Renombrar las columnas
colnames(minimos_por_clasificacion) <- c("Clasificacion", "Punto_Corte")
minimos_por_clasificacion
hist(puntuaciones2)
rowSums(DatosCap[,c(1:22)])
#Transformacion del puntaje
#################################
#Puntaje euristico
Puntaje_euristico <- rowSums(DatosCap[,c(1:22)])
hist(Puntaje_euristico )
cor_spearman <- cor(puntuaciones2,Puntaje_euristico , method = "spearman")
cor_spearman
plot(puntuaciones2~Puntaje_euristico)
minimos_por_clasificacion
clustersPun2$V1
#Cluster puntaje heuristico{
kmeansHeuris <- kmeans(Puntaje_euristico,4, iter.max = 1000, nstart = 1)
kmeansHeuris
fviz_cluster(kmeansHeuris  ,data=DatosCap)
clustersHeuris<- data.frame(cbind(kmeansHeuris$cluster,Puntaje_euristico))
clustersHeuris
minimos_por_clasificacionHeuris <- aggregate(clustersHeuris$Puntaje_euristico,
by = list(clasificacion = clustersHeuris$V1), FUN = min)
minimos_por_clasificacionHeuris
colnames(minimos_por_clasificacion) <- c("Clasificacion", "Punto_Corte")
colnames(minimos_por_clasificacionHeuris) <- c("Clasificacion", "Punto_Corte")
minimos_por_clasificacionHeuris
#Clasificaciones Dificultad en Capacidad
clustersHeuris$V1
clustersPun2$V1
fviz_cluster(kmeansHeuris,data=DatosCap)
fviz_cluster(kmeansPun2 ,data=DatosCap)
fviz_cluster(kmeansHeuris,data=DatosCap)
DifCapAPC <- ifelse(clustersPun2$V1 == 1, "LEVE",
ifelse(clustersPun2$V1 == 2, "GRAVE",
ifelse(clustersPun2$V1 == 3, "MODERADA",
ifelse(clustersPun2$V1 == 4, "NINGUNA", NA))))
DifCapAPC
DifCapHeuris <- ifelse(clustersHeuris$V1 == 1, "LEVE",
ifelse(clustersHeuris$V1 == 2, "GRAVE",
ifelse(clustersHeuris$V1 == 3, "MODERADA",
ifelse(clustersHeuris$V1== 4, "NINGUNA", NA))))
DifCapHeuris
View(DatosCap)
#Transformacion del puntaje
#################################
#Puntaje euristico
DatosCap$PuntajeCapH <- Puntaje_euristico
minimos_por_clasificacionHeuris
fviz_cluster(kmeansHeuris,data=DatosCap)
DifCapHeuris <- ifelse(clustersHeuris$V1 == 1, "LEVE",
ifelse(clustersHeuris$V1 == 2, "MODERADA",
ifelse(clustersHeuris$V1 == 3, "GRAVE",
ifelse(clustersHeuris$V1== 4, "NINGUNA", NA))))
DifCapHeuris
minimos_por_clasificacion
colnames(minimos_por_clasificacionHeuris) <- c("Cluster", "Punto_Corte")
minimos_por_clasificacionHeuris
minimos_por_clasificacionHeuris$Clasificacion <- c("LEVE","MODERADA","GRAVE","NINGUNA")
minimos_por_clasificacionHeuris$Clasificacion
minimos_por_clasificacionHeuris
minimos_por_clasificacion
minimos_por_clasificacion$Clasificacion <- c("LEVE","GRAVE","MODERADA","NINGUNA")
minimos_por_clasificacion$Clasificacion
minimos_por_clasificacion
# Calcular el mínimo de puntación para cada clasificación
###Puntajes de corte
minimos_por_clasificacion <- aggregate(clustersPun2$puntuaciones2,
by = list(clasificacion = clustersPun2$V1), FUN = min)
# Renombrar las columnas
colnames(minimos_por_clasificacion) <- c("Clasificacion", "Punto_Corte")
# Renombrar las columnas
colnames(minimos_por_clasificacion) <- c("Custer", "Punto_Corte")
minimos_por_clasificacion$Clasificacion <- c("LEVE","GRAVE","MODERADA","NINGUNA")
minimos_por_clasificacion
Puntaje_heuristico <- rowSums(DatosCap[,c(1:22)])
Datos <- cbind(Datos,puntuaciones2,DifCapAPC,Puntaje_heuristico,DifCapHeuris)
Datos
kmeansHeuris
DifCapAPC <- ifelse(clustersPun2$V1 == 1, "LEVE",
ifelse(clustersPun2$V1 == 2, "SEVERA",
ifelse(clustersPun2$V1 == 3, "MODERADA",
ifelse(clustersPun2$V1 == 4, "NINGUNA", NA))))
DifCapHeuris <- ifelse(clustersHeuris$V1 == 1, "LEVE",
ifelse(clustersHeuris$V1 == 2, "MODERADA",
ifelse(clustersHeuris$V1 == 3, "SEVERA",
ifelse(clustersHeuris$V1== 4, "NINGUNA", NA))))
minimos_por_clasificacion$Clasificacion <- c("LEVE","GRAVE","SEVERA","NINGUNA")
minimos_por_clasificacion
minimos_por_clasificacionHeuris$Clasificacion <- c("LEVE","MODERADA","SEVERA","NINGUNA")
rm(Datos)
Datos <- read.csv("datos.csv")
Datos <- cbind(Datos,puntuaciones2,DifCapAPC,Puntaje_heuristico,DifCapHeuris)
Datos
### Objetivo 2
##Sub muestras de cada nivel de capacidad
##Submuestras por acp
lista_clasifACP <- split(Datos, Datos$DifCapAPC)
lista_clasifACP
kmeansHeuris
kmeansPun2
lista_clasifACP$LEVE
View(Datos)
(lista_clasifACP$LEVE)[,c(29.73)]
(lista_clasifACP$LEVE)[,c(29:73)]
DesACPLEVE <- (lista_clasifACP$LEVE)[,c(29:73)]
DesACPMODERADA <- (lista_clasifACP$MODERADA)[,c(29:73)]
DesACPSEVERA <- (lista_clasifACP$SEVERA)[,c(29:73)]
DesACPNINGUNA <- (lista_clasifACP$NINGUNA)[,c(29:73)]
sample(DesACPLEVE,3000,replace = T)
DesACPLEVE
submuestra
# Lista para almacenar la cantidad de varianza explicada de cada submuestra
varExp_LeveD <- vector("list", num_submuestras)
carFact_LeveD<-  vector("list", num_submuestras)
# Ciclo para generar y analizar cada submuestra
for (i in 1:num_submuestras) {
# Generar una submuestra aleatoria
submuestra <- DesACPLEVE[sample(nrow(DesACPLEVE), tam_submuestra, replace = T), ]
# Calcular la cantidad de varianza explicada por el PCA de la submuestra actual
varExp_LeveD[[i]] <- calcular_varianza_pca(submuestra)
carFact_LeveD[[i]] <- calcular_cargas_pca(submuestra)
}
